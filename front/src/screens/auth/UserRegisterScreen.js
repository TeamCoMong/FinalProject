import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { NGROK_URL } from '../../config/ngrok';
import { getEventSource } from '../../services/SSEService';

import Voice from '@react-native-voice/voice';
import Tts from 'react-native-tts';

const UserRegisterScreen = () => {
    const navigation = useNavigation();
    const [name, setName] = useState('');

    const handleIntentEvent = (event) => {
        try {
            console.log('üî• [SSE] intent ÏàòÏã†:', event);
            console.log('üåü intent Ïù¥Î≤§Ìä∏Ïùò event.data:', event.data);

            const data = JSON.parse(event.data);
            console.log('üì¶ ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞:', data);

            if (data.intent === 'ÌöåÏõêÍ∞ÄÏûÖ_Ïù¥Î¶ÑÏûÖÎ†•') {
                console.log('üß† ÏùëÎãµ:', data.message);

                if (data.person) {
                    console.log('üßç ÏÑúÎ≤ÑÍ∞Ä ÏïåÎ†§Ï§Ä Ïù¥Î¶Ñ(SSE):', data.person);
                    setName(data.person);
                } else {
                    console.log('üö´ data.person ÏóÜÏùå!');
                }
            }
        } catch (err) {
            console.error('‚ùå SSE intent Ï≤òÎ¶¨ Ïã§Ìå®:', err);
            console.error('‚ùå Ïã§Ìå® ÏõêÎ≥∏ event.data:', event.data);
        }
    };

    useEffect(() => {
        let isRegistered = false;

        const tryRegisterIntentListener = () => {
            const currentEventSource = getEventSource(); // ‚úÖ Ïó¨Í∏∞Ïóê Ìò∏Ï∂ú
            if (currentEventSource && !isRegistered) {
                console.log('‚úÖ eventSource Ï§ÄÎπÑÎê®, handleIntentEvent Îì±Î°ù');
                currentEventSource.addEventListener('intent', handleIntentEvent);  // ‚úÖ Ïó¨Í∏∞ Î≥ÄÍ≤Ω
                isRegistered = true;
            } else if (!isRegistered) {
                console.warn('‚è≥ eventSource ÏïÑÏßÅ ÏóÜÏùå, 1Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ');
                setTimeout(tryRegisterIntentListener, 1000);
            }
        };

        tryRegisterIntentListener();

        const triggerSignupWelcome = async () => {
            try {
                const res = await fetch(`${NGROK_URL}/dialogflow/triggerEvent?event=signup_welcome`);
                const data = await res.json();
                console.log('üß† Ïõ∞Ïª¥ ÏùëÎãµ:', data.message);

                if (data.person) {
                    console.log('üßç ÏÑúÎ≤ÑÍ∞Ä ÏïåÎ†§Ï§Ä Ïù¥Î¶Ñ:', data.person);
                    setName(data.person);
                }

                Tts.stop();
                await Tts.speak(data.message);

                Tts.addEventListener('tts-finish', async () => {
                    console.log('üé§ TTS ÎÅùÎÇ¨ÏúºÎãà ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë');
                    try {
                        await Voice.start('ko-KR');
                    } catch (e) {
                        console.error('‚ùå ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë Ïã§Ìå®:', e);
                    }
                });

            } catch (err) {
                console.error('‚ùå Ïõ∞Ïª¥ Ïù¥Î≤§Ìä∏ Ìò∏Ï∂ú Ïã§Ìå®:', err);
            }
        };

        triggerSignupWelcome();

        Voice.onSpeechError = (e) => {
            console.error('‚ùå ÏùåÏÑ± Ïù∏Ïãù Ïò§Î•ò:', e.error);
        };

        return () => {
            Tts.removeAllListeners('tts-finish');
            Voice.destroy().then(Voice.removeAllListeners);

            const currentEventSource = getEventSource(); // ‚úÖ
            if (currentEventSource) {
                currentEventSource.removeEventListener('intent', handleIntentEvent);
            }
        };
    }, []);

    const handleNextButtonPress = () => {
        if (name.trim() === '') {
            Alert.alert('ÏûÖÎ†• Ïò§Î•ò', 'Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
        } else {
            console.log('ÏûÖÎ†•Ìïú Ïù¥Î¶Ñ:', name);
            // navigation.navigate('ÏßÄÎ¨∏Îì±Î°ùÌôîÎ©¥') Îì± Ïù¥Îèô
        }
    };

    const handleBackButtonPress = () => {
        navigation.goBack();
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>ÌöåÏõêÍ∞ÄÏûÖ</Text>
            <Text style={styles.label}>Ïù¥Î¶Ñ</Text>
            <TextInput
                style={styles.input}
                placeholder="Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                value={name}
                onChangeText={setName}
            />
            <TouchableOpacity style={styles.button} onPress={handleNextButtonPress}>
                <Text style={styles.buttonText}>ÏßÄÎ¨∏Îì±Î°ù ÌïòÎü¨ Í∞ÄÍ∏∞</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.backButton} onPress={handleBackButtonPress}>
                <Text style={styles.backButtonText}>Îí§Î°ú Í∞ÄÍ∏∞</Text>
            </TouchableOpacity>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 20,
    },
    title: {
        fontSize: 24,
        fontWeight: 'bold',
        marginBottom: 20,
        textAlign: 'center',
    },
    label: {
        fontSize: 18,
        marginBottom: 10,
    },
    input: {
        borderWidth: 1,
        borderColor: '#ccc',
        borderRadius: 10,
        padding: 15,
        marginBottom: 20,
        fontSize: 16,
    },
    button: {
        backgroundColor: '#4CAF50',
        paddingVertical: 15,
        paddingHorizontal: 30,
        borderRadius: 30,
        alignItems: 'center',
        marginBottom: 10,
    },
    buttonText: {
        fontSize: 18,
        color: '#fff',
        fontWeight: 'bold',
    },
    backButton: {
        backgroundColor: '#f44336',
        paddingVertical: 15,
        paddingHorizontal: 30,
        borderRadius: 30,
        alignItems: 'center',
    },
    backButtonText: {
        fontSize: 18,
        color: '#fff',
        fontWeight: 'bold',
    },
});

export default UserRegisterScreen;